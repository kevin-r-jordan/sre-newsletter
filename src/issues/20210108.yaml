---
issue_number:   9
release_date:   2021-01-08
is_latest:      false
status:         published       # draft or published

links:
    - title:      "What I’ve Learned in 45 Years in the Software Industry"
      url:        "https://www.bti360.com/what-ive-learned-in-45-years-in-the-software-industry/"
      summary:    "Joel Goldberg recently retired after working in the software industry for over four decades. When he left he shared with our team some of the lessons he learned over his career."
    - title:      "Leading through Better Value Sooner Safer Happier"
      url:        "https://itrevolution.com/leading-through-better-value-sooner-safer-happier"
      summary:    "Gene Kim Interviews Jonathan Smart, author of Sooner Safer Happier, a book about antipatterns and patterns for business agility."
    - title:      "Become A DevOps Engineer in 2021: A Comprehensive Guide"
      url:        "https://devopscube.com/become-devops-engineer/"
      summary:    "One common question is, “How to become a DevOps engineer?” Organizations trying to achieve DevOps requires people with collaborative skills, willing to change and adopt new technologies, a good understanding of systems, automation tools, CI tools, Version control systems, networking, experience in using project management tools, etc. that are required for getting an app into production."
    - title:      "Dockerfile Best Practices"
      url:        "https://github.com/hexops/dockerfile"
      summary:    "Writing production-worthy Dockerfiles is not as simple as you would imagine. Most Docker images in the wild fail here, and even professionals often get this wrong. This repository has best-practices for writing Dockerfiles that @slimsag has learned over the years both from his personal projects and from his work @sourcegraph."
    - title:      "Code Age vs Time to Recall"
      url:        "https://notoriousbfg.com/code-age-vs-time-to-recall"
      summary:    "One common developer bias is that old code is bad. The reason old code is often seen this way is because it takes longer to remember. Developers yearn for clarity but if they're not immediately able to recall under what circumstances some code was written (in a few seconds or less), they only see ambiguity."
    - title:      "Designing Engineering Organizations"
      url:        "https://jacobian.org/2021/jan/5/designing-engineering-organizations/"
      summary:    "How should you structure a larger engineering organization, one with dozens (or hundreds) of engineers? There are many tradeoffs to consider, and no single right answer. But, there are some structures that work better than others. The most effective teams are stable, multi-disciplinary, aligned to product delivery."
    - title:      "Understanding Connections & Pools"
      url:        "https://sudhir.io/understanding-connections-pools/"
      summary:    "What connections are, how they affect our systems, and how and why pooling works—with notes on how popular applications servers and databases handle connections."
    - title:      "Load Testing is Hard, and The Tools Are Not Great. But Why?"
      url:        "https://ntietz.com/tech-blog/load-testing-is-hard-but-why/"
      summary:    "If you want to see whether or not your application can handle scale, just generate scale and see if it can handle it! It sounds straightforward enough. Nicholas Tietz-Sokolsky explains why it's not so simple."
    - title:      "SolarWinds: The More We Learn, the Worse it Looks"
      url:        "https://www.zdnet.com/article/solarwinds-the-more-we-learn-the-worse-it-looks/"
      summary:    "Russia, we now know, used SolarWinds' hacked program to infiltrate at least 18,000 government and private networks. The data within these networks, user IDs, passwords, financial records, source code, you name it, can be presumed now to be in the hands of Russian intelligence agents."
    - title:      "Automated Combinatorial Testing for Software"
      url:        "https://csrc.nist.gov/projects/automated-combinatorial-testing-for-software"
      summary:    "Combinatorial methods can reduce costs for software testing significantly. They may also be one of the few practical approaches for assurance in AI and machine learning, especially for autonomous systems, where many conventional methods cannot be used."
...      